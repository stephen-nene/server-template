"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
from urllib.parse import urlparse
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

is_production = config('ENVIRONMENT', default="development") == 'production'

FRONTEND_URL = config("FRONTEND_URL")
# print(is_production)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ["*"]



SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=20),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ACTIVATE_TOKEN_LIFETIME": timedelta(days=1),
    "RESET_TOKEN_LIFETIME": timedelta(minutes=10),
    "ROTATE_REFRESH_TOKENS": True,  # Rotates refresh tokens upon refresh
    "BLACKLIST_AFTER_ROTATION": True,
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,     
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_COOKIE_ACCESS": "access", 
    "AUTH_COOKIE_REFRESH": "refresh",
    "AUTH_COOKIE_ACTIVATE": "activate",
    "AUTH_COOKIE_RESET": 'reset', 
    "AUTH_COOKIE_DOMAIN": None,  # Set this if using a custom domain
    "AUTH_COOKIE_SECURE": True,  # Use True in production (for HTTPS)
    "AUTH_COOKIE_HTTP_ONLY": True,  # Prevent JavaScript access
    "AUTH_COOKIE_PATH": "/",  # Available for all routes
}

# Application definition

AUTH_USER_MODEL = 'profiles.user'

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg',
    'profiles',    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
       'DEFAULT_AUTHENTICATION_CLASSES': (
           'rest_framework_simplejwt.authentication.JWTAuthentication',
       ),
       'DEFAULT_PERMISSION_CLASSES': (
           'rest_framework.permissions.IsAuthenticated',
       ),
       'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
       'PAGE_SIZE': 10,
       'DEFAULT_RENDERER_CLASSES': (
           'rest_framework.renderers.JSONRenderer',
           'rest_framework.renderers.BrowsableAPIRenderer',
       ),
       'DEFAULT_PARSER_CLASSES': (
           'rest_framework.parsers.JSONParser',
           'rest_framework.parsers.FormParser',
           'rest_framework.parsers.MultiPartParser',
       ),
       
   }



# If you need to allow dynamic ports, use CORS_ALLOWED_ORIGIN_REGEXES instead:
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost:\d+$",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:1420", 
    'https://stevenene.vercel.com',
    'https://frontend-template-pi.vercel.app',
    'https://server-template-n0q8.onrender.com',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:1420",
    'https://stevenene.vercel.com',
    'https://frontend-template-pi.vercel.app',
    'https://server-template-n0q8.onrender.com',
]

ALLOWED_HOSTS = ['server-template-n0q8.onrender.com','stevenene.vercel.com','frontend-template-pi.vercel.app' ,"localhost", "127.0.0.1"]



ROOT_URLCONF = 'settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'settings.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

tmpPostgres = urlparse(config("DATABASE_URL"))
# print("Database", tmpPostgres)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql' if is_production else 'django.db.backends.sqlite3',
        'NAME': tmpPostgres.path.replace('/', '') if is_production else BASE_DIR / 'server.db',
        'USER': tmpPostgres.username if is_production else '',
        'PASSWORD': tmpPostgres.password if is_production else '',
        'HOST': tmpPostgres.hostname if is_production else '',
        'PORT': config('DB_PORT') if is_production else '',
        'OPTIONS': {
            'sslmode': 'require',
        } if is_production else {},
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR/ 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Base URL for serving media files
MEDIA_URL = "/api/v1/uploads/"
# Absolute filesystem path to the directory that will hold uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Emails 
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = config('MAIL_SERVER')
EMAIL_HOST_USER = config('MAIL_USERNAME')
EMAIL_HOST_PASSWORD = config('MAIL_PASSWORD')
EMAIL_PORT = config('MAIL_PORT', cast=int)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# print("EMAIL_HOST:", config('MAIL_SERVER'))
# print("EMAIL_HOST_USER:", config('MAIL_USERNAME'))
# print("EMAIL_HOST_PASSWORD:", config('MAIL_PASSWORD'))
# print("EMAIL_PORT:", config('MAIL_PORT'))
